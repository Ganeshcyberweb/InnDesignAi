generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @unique @map("user_id") @db.Uuid
  name      String?
  company   String?
  role      UserRole   @default(CLIENT)
  avatar    String?    @map("avatar_url")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  designs   Design[]
  feedback  Feedback[]

  @@map("profiles")
}

model Design {
  id               String          @id @default(uuid()) @db.Uuid
  userId           String          @map("user_id") @db.Uuid
  inputPrompt      String          @map("input_prompt")
  uploadedImageUrl String?         @map("uploaded_image_url")
  aiModelUsed      String          @map("ai_model_used")
  status           DesignStatus    @default(PENDING)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  designOutputs    DesignOutput[]
  profile          Profile         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  feedback         Feedback[]
  preferences      Preferences?    @relation("DesignPreferences")
  roiCalculation   RoiCalculation? @relation("DesignROI")

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("designs")
}

model Preferences {
  id                  String   @id @default(uuid()) @db.Uuid
  designId            String   @unique @map("design_id") @db.Uuid
  roomType            String   @map("room_type")
  size                String
  stylePreference     String   @map("style_preference")
  budget              Float?
  colorScheme         String?  @map("color_scheme")
  materialPreferences String?  @map("material_preferences")
  otherRequirements   String?  @map("other_requirements")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  design              Design   @relation("DesignPreferences", fields: [designId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model DesignOutput {
  id                   String   @id @default(uuid()) @db.Uuid
  designId             String   @map("design_id") @db.Uuid
  outputImageUrl       String   @map("output_image_url")
  variationName        String?  @map("variation_name")
  generationParameters Json?    @map("generation_parameters")
  createdAt            DateTime @default(now()) @map("created_at")
  design               Design   @relation(fields: [designId], references: [id], onDelete: Cascade)

  @@index([designId])
  @@map("design_outputs")
}

model RoiCalculation {
  id              String   @id @default(uuid()) @db.Uuid
  designId        String   @unique @map("design_id") @db.Uuid
  estimatedCost   Float    @map("estimated_cost")
  roiPercentage   Float    @map("roi_percentage")
  paybackTimeline String?  @map("payback_timeline")
  costBreakdown   Json?    @map("cost_breakdown")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  design          Design   @relation("DesignROI", fields: [designId], references: [id], onDelete: Cascade)

  @@map("roi_calculations")
}

model Feedback {
  id        String       @id @default(uuid()) @db.Uuid
  designId  String       @map("design_id") @db.Uuid
  userId    String       @map("user_id") @db.Uuid
  rating    Int          @db.SmallInt
  comments  String?
  type      FeedbackType @default(GENERAL)
  helpful   Boolean?
  metadata  Json?
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  design    Design       @relation(fields: [designId], references: [id], onDelete: Cascade)
  profile   Profile      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([designId])
  @@index([userId])
  @@index([rating])
  @@map("feedback")
}

enum UserRole {
  CLIENT
  DESIGNER
  ADMIN
}

enum DesignStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
}

enum FeedbackType {
  GENERAL
  QUALITY
  ACCURACY
  USABILITY
  FEATURE_REQUEST
  BUG_REPORT
}
